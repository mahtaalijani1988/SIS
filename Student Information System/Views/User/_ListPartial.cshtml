@using DbModel.DomainClasses.Enums
@using Student_Information_System.Extentions.Helpers
@using PagedList
@using PagedList.Mvc
@using DbModel.ViewModel.User
@model UsersListViewModel
@Html.AntiForgeryToken()
<table class="table table-striped" id="UserTable">
    <thead>
        <tr>
            <th>UserName</th>
            <th>Role</th>
            <th>LastLoginDate</th>
            <th>RegisterDate</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var advs in Model.UsersList)
        {
            <tr>
                <td><span class="label label-important">@advs.UserName</span></td>
                <td><span class="label label-important">@advs.RoleDescritpion</span></td>
                <td><span class="label label-important">@Html.ConvertToShortDateTime(advs.LastLoginDate)</span>
                </td>
                <td><span class="label label-important">@Html.ConvertToShortDateTime(advs.RegisterDate)</span>
                </td>
                <td>
                    <div class="btn-group pull-right">
                        <button data-toggle="dropdown" class="btn dropdown-toggle">
                            <i class="icon-cog"></i>
                            <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu">
                            @if (advs.RoleDescritpion.Contains("Admin"))
                            {
                                <li><a href="~/Customer/Edit/@advs.Id"><i class="icon-file"></i> Edit</a></li>
                            }
                            else if (advs.RoleDescritpion.Contains("Student"))
                            {
                                <li><a href="~/Student/Edit/@advs.StudentData.Id"><i class="icon-file"></i> Edit</a></li>
                            }
                            else if (advs.RoleDescritpion.Contains("Professor"))
                            {
                                <li><a href="~/Professor/Edit/@advs.ProfessorData.Id"><i class="icon-file"></i> Edit</a></li>
                            }
                            <li class="divider"></li>
                            <li><a href="#" id="row-@advs.Id"><i class="icon-trash"></i> Delete</a></li>
                        </ul>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="widget-content">
    <div class="widget-box">
        @using (Ajax.BeginForm("List", "User", null, new AjaxOptions
        {
            HttpMethod = "POST",
            InsertionMode = InsertionMode.Replace,
            UpdateTargetId = "UserList"
        }, new { @class = "well form-inline", id = "UserFilterForm" }))
        {
            @Html.Hidden("term", Model.Term)
            @*@Html.Hidden("courseSearchBy", ViewBag.courseSearchBy as string)*@
            @*@Html.DropDownList("courseOrderBy", ViewBag.courseOrderByList as IEnumerable<SelectListItem>, new { @class = "form-control" })*@
            @Html.DropDownList("order", ViewBag.OrderList as IEnumerable<SelectListItem>, new { @class = "form-control" })
            @Html.DropDownList("count", ViewBag.CountList as IEnumerable<SelectListItem>, new { @class = "form-control" })

            <button class="btn">
                <i class="icon-key bigger-110"></i>
                Sort By
            </button>
        }
    </div>
</div>
@*@Html.PagedListPager(new StaticPagedList<UserViewModel>(Model.UsersList, Model.PageNumber,
    Model.PageCount, Model.TotalUsers),
    pageNumber => Url.Action("List", "User", new
    {
        term = Model.Term,
        pageNumber = pageNumber,
        pageCount = Model.PageCount,
        order = Model.Order,
        userOrderBy = Model.UserOrderBy,
        userSearchBy = ViewBag.UserSearchBy
    })
    , PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new PagedListRenderOptions()
    {
        DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
        DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
        Display = PagedListDisplayMode.IfNeeded,
        UlElementClasses = new List<string> { "pagination mbs" },
        MaximumPageNumbersToDisplay = 10
    }, new AjaxOptions
    {
        AllowCache = false,
        HttpMethod = "GET",
        InsertionMode = InsertionMode.Replace,
        UpdateTargetId = "UserList"
    }
))*@

@Html.PagedListPager(new StaticPagedList<UserViewModel>(Model.UsersList, Model.PageNumber,
    Model.PageCount, Model.TotalUsers),
    pageNumber => Url.Action("List", "User", new
    {
        term = Model.Term,
        pageNumber = pageNumber,
        pageCount = Model.PageCount,
        order = Model.Order,
        userOrderBy = Model.UserOrderBy,
        userSearchBy = ViewBag.UserSearchBy
    }), PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(PagedListRenderOptions.ClassicPlusFirstAndLast,
                new AjaxOptions
                {
                    AllowCache = false,
                    HttpMethod = "GET",
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = "UserList"
                }))
<script>
    Public.Routin();
</script>


